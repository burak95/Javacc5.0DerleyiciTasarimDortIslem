
/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */


options {
 STATIC=false;
}

PARSER_BEGIN(Simple1)

import java.io.*;
public class Simple1 {

  public static void main(String args[]) throws ParseException {
   FileInputStream fs=null;
        try{
         fs=new FileInputStream("giris.txt");
        }
        catch ( FileNotFoundException e){
           
        }
        Simple1 s=new Simple1(fs);
        s.Start(System.out);
  }
double pValue=0.0;

}

PARSER_END(Simple1)

TOKEN : {
<#DIGIT : ["0"-"9"]>
|<TOPLAMA : "+" >
|<CIKARMA : "-">
|<CARPMA : "*">
|<BOLME : "/">
|<NUM : (<DIGIT>)+>
|<EOL : "\n" | "\r"| "\r\n" >
|<REAL : ((<DIGIT>)+"."(<DIGIT>)*)| ((<DIGIT>)*"."(<DIGIT>)+)>
|<US : "^"> 
}

SKIP : {
<"--" (~["\n","\r"])*("\n"|"\r"|"\n\r")>
| " " 
| "\n"
| "\r"
| "\t"

}

void Start(PrintStream ps) throws NumberFormatException:{}
{

(
pValue = Expression()
<EOL>
{ ps.println( pValue ) ; }
)*
<EOF>
}

double Expression() throws NumberFormatException :
{
double i ;
double value ;
}
{
value = Term()
(
<TOPLAMA>
i = Term()
{ value += i ; }
|
<CIKARMA>
i = Term()
{ value -= i ; }
)*
{ return value ; }
}

double Getir() throws NumberFormatException :
{
Token t ;
}
{
t = <NUM>
{ return Double.parseDouble( t.image ) ; }
}

double Term() throws NumberFormatException :
{
double i ;
double value ;
}
{
value = Us()
(
<CARPMA>
i = Us()
{ value *= i ; }
|
<BOLME>
i = Us()
{ value /= i ; }
)*
{ return value ; }
}

double Us() throws NumberFormatException :
{
double i ;
double value ;
}
{
value = Getir()
(
<US>
i = Getir()
{ value=Math.pow(value , i) ; }
)*
{ return value ; }
}

